
/* Drop Tables */

DROP TABLE IF EXISTS Cliente CASCADE
;

DROP TABLE IF EXISTS Cuenta CASCADE
;

DROP TABLE IF EXISTS Cliente_Cuenta CASCADE
;

DROP TABLE IF EXISTS Transaccion CASCADE
;

DROP TABLE IF EXISTS Cuenta_Aliada CASCADE
;

DROP TABLE IF EXISTS Access CASCADE
;

/* Create Tables */

CREATE TABLE Cliente
(
	K_ID numeric(11) NOT NULL,
	N_NOMBRE varchar NOT NULL,
	N_APELLIDO varchar NOT NULL,
	Q_EDAD numeric(3) NOT NULL
)
;

CREATE TABLE Cuenta
(
	K_IDCUENTA serial NOT NULL,
	Q_SALDO money NOT NULL,
	N_TIPO varchar NOT NULL,
	Q_CONTRASENNA numeric(4) NOT NULL,
	B_UNLONCK bool NOT NULL DEFAULT true
)
;

CREATE TABLE Cliente_Cuenta
(
	K_ID numeric(11) NOT NULL,
	K_IDCUENTA integer NOT NULL
)
;

CREATE TABLE Transaccion
(
    K_IDTX serial NOT NULL,
	K_IDCUENTA integer NOT NULL,
	D_DATE DATE NOT NULL DEFAULT CURRENT_DATE,
	O_DESCRIPCION varchar NOT NULL,
	O_TIPO varchar NOT NULL
)
;

CREATE TABLE Cuenta_Aliada
(
	K_IDCUENTA integer NOT NULL,
	K_IDCUENTAALIADA integer NOT NULL
)
;

CREATE TABLE Access
(
	K_IDCUENTA integer NOT NULL,
	D_LAST_ACCESS TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	I_FAILED_TRIES integer NOT NULL
);

/* Create Primary Keys, Indexes, Uniques, Checks */

ALTER TABLE Cliente ADD CONSTRAINT PK_Cliente
	PRIMARY KEY (K_ID)
;

ALTER TABLE Cuenta ADD CONSTRAINT PK_Cuenta
	PRIMARY KEY (K_IDCUENTA)
;

ALTER TABLE CLIENTE_CUENTA ADD CONSTRAINT PK_CLIENTE_CUENTA
	PRIMARY KEY (K_IDCUENTA)
;

CREATE INDEX IXFK_CLIENTE_CUENTA_Cliente ON CLIENTE_CUENTA (K_ID ASC)
;

CREATE INDEX IXFK_CLIENTE_CUENTA_Cuenta ON CLIENTE_CUENTA (K_IDCUENTA ASC)
;

ALTER TABLE Transaccion ADD CONSTRAINT PK_Transaccion
	PRIMARY KEY (K_IDTX)
;

ALTER TABLE Cuenta_Aliada ADD CONSTRAINT PK_CUENTA_ALIADA
	PRIMARY KEY (K_IDCUENTA, K_IDCUENTAALIADA)
;

ALTER TABLE Access ADD CONSTRAINT PK_ACCESS
	PRIMARY KEY (K_IDCUENTA)
;

/* Create Foreign Key Constraints */

ALTER TABLE Transaccion ADD CONSTRAINT FK_Transaccion_Cuenta
	FOREIGN KEY (K_IDCUENTA) REFERENCES Cuenta (K_IDCUENTA) ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE CLIENTE_CUENTA ADD CONSTRAINT FK_CLIENTE_CUENTA_Cliente
	FOREIGN KEY (K_ID) REFERENCES Cliente (K_ID) ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE CLIENTE_CUENTA ADD CONSTRAINT FK_CLIENTE_CUENTA_Cuenta
	FOREIGN KEY (K_IDCUENTA) REFERENCES Cuenta (K_IDCUENTA) ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE CUENTA_ALIADA ADD CONSTRAINT FK_CUENTA_ALIADA_Cuenta
	FOREIGN KEY (K_IDCUENTA) REFERENCES Cuenta (K_IDCUENTA) ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE CUENTA_ALIADA ADD CONSTRAINT FK_CUENTA_ALIADA_Aliada
	FOREIGN KEY (K_IDCUENTAALIADA) REFERENCES Cuenta (K_IDCUENTA) ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE Access ADD CONSTRAINT FK_ACCESS_Cuenta
	FOREIGN KEY (K_IDCUENTA) REFERENCES Cuenta (K_IDCUENTA) ON DELETE No Action ON UPDATE No Action
;

/* Alter sequence from Cuenta */

ALTER SEQUENCE cuenta_k_idcuenta_seq RESTART WITH 1000
;

SET TIME ZONE 'America/Bogota'
;

/* Create Triggers */

CREATE OR REPLACE FUNCTION add_reg() RETURNS TRIGGER AS $add_reg$
    DECLARE
        idCuenta integer;
	BEGIN
        IF(TG_TABLE_NAME = 'cliente') THEN
            INSERT INTO Cuenta(Q_SALDO, N_TIPO, Q_CONTRASENNA) VALUES(10000000, 'VIP', 1234) RETURNING K_IDCUENTA INTO idCuenta;
            INSERT INTO Cliente_Cuenta(K_ID, K_IDCUENTA) VALUES(NEW.K_ID, idCuenta);
        ELSEIF(TG_TABLE_NAME = 'cuenta') THEN
            INSERT INTO Access(K_IDCUENTA, I_FAILED_TRIES) VALUES(NEW.K_IDCUENTA, 0);
        END IF;
        RETURN NULL;
    END;
$add_reg$ LANGUAGE plpgsql;

CREATE TRIGGER add_Cuenta
    AFTER INSERT ON Cliente
    FOR EACH ROW EXECUTE PROCEDURE add_reg();

CREATE TRIGGER add_Access
    AFTER INSERT ON Cuenta
    FOR EACH ROW EXECUTE PROCEDURE add_reg();

CREATE OR REPLACE FUNCTION lock_unlock_account() RETURNS TRIGGER AS $lock_unlock_account$
    BEGIN
        IF(NEW.I_FAILED_TRIES >= 3) THEN
            UPDATE Cuenta SET B_UNLONCK = false WHERE K_IDCUENTA = NEW.K_IDCUENTA;
        ELSEIF(NEW.I_FAILED_TRIES = 0) THEN
            UPDATE Cuenta SET B_UNLONCK = true WHERE K_IDCUENTA = NEW.K_IDCUENTA;
        END IF;
        RETURN NULL;
    END;
$lock_unlock_account$ LANGUAGE plpgsql;

CREATE TRIGGER lock_unlock_account
    AFTER UPDATE ON Access
    FOR EACH ROW EXECUTE PROCEDURE lock_unlock_account();